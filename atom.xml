<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yours22的博客</title>
  
  
  <link href="https://yours22.github.io/project/atom.xml" rel="self"/>
  
  <link href="https://yours22.github.io/project/"/>
  <updated>2024-04-16T04:14:33.107Z</updated>
  <id>https://yours22.github.io/project/</id>
  
  <author>
    <name>Yours22</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>操作系统-进程管理.md</title>
    <link href="https://yours22.github.io/project/2024/04/16/OS-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <id>https://yours22.github.io/project/2024/04/16/OS-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</id>
    <published>2024-04-16T02:13:38.000Z</published>
    <updated>2024-04-16T04:14:33.107Z</updated>
    
    <content type="html"><![CDATA[<h1>第二讲 进程管理</h1><h2 id="2-1-2-什么是进程">2.1.2 什么是进程</h2><ol><li class="lvl-3"><p>程序的代码</p></li><li class="lvl-3"><p>程序的数据</p></li><li class="lvl-3"><p>CPU寄存器的值</p></li><li class="lvl-3"><p>堆、栈</p></li><li class="lvl-3"><p>一组系统资源</p></li></ol><h3 id="栈-Stack">栈  (Stack)</h3><ul class="lvl-0"><li class="lvl-2"><p>用于暂存功能，保存程序运行时的上下文信息</p></li><li class="lvl-2"><p>在函数调用时，保存被调用函数的局部变量和形参</p></li></ul><h3 id="堆-Heap">堆 (Heap)</h3><ul class="lvl-0"><li class="lvl-2"><p>内存中的一块空间，用于动态分配；</p></li><li class="lvl-2"><p>在C语言中，通过malloc来申请动态内存空间，通过free来释放；</p></li><li class="lvl-2"><p>使用不当可能导致内存泄漏。</p></li></ul><h3 id="进程的特性">进程的特性</h3><ul class="lvl-0"><li class="lvl-2"><p>动态性：程序的运行状态在变，PC、寄存器、堆和栈等；</p></li><li class="lvl-2"><p>独立性：是一个独立的实体，是计算机系统资源的使用单位。每个进程在一个“虚拟计算机”上运行，每个进程都有“自己”的PC和内部状态，运行时独立于其他的进程（虚拟PC和物理PC）；</p></li><li class="lvl-2"><p>并发性：从宏观上看各进程是同时独立运行的</p></li></ul><h3 id="进程的创建">进程的创建</h3><p>引起进程创建的三个主要事件：</p><ol><li class="lvl-3"><p>系统初始化时；</p></li><li class="lvl-3"><p>在一个正在运行的进程当中，执行了创建进程的系统调用；</p></li><li class="lvl-3"><p>用户请求创建一个新进程。</p></li></ol><p>从技术上来说，只有一种创建进程的方法，即在一个已经存在的进程（用户进程或系统进程）当中，通过系统调用来创建一个新的进程。</p><p>Unix：fork函数；<br>Windows：CreateProcess函数;</p><h3 id="进程的状态">进程的状态</h3><ul class="lvl-0"><li class="lvl-2"><p>运行状态（Running）：进程占有CPU，并在CPU上运行。处于此状态的进程数目小于等于CPU的数目。</p></li><li class="lvl-2"><p>就绪状态（Ready）：进程已经具备运行条件，但由于CPU忙暂时不能运行，只要分得CPU即可执行；</p></li><li class="lvl-2"><p>阻塞状态（Blocked）：指进程因等待某种事件的发生而暂时不能运行的状态（如I/O操作或进程同步）,此时，即使CPU空闲，该进程也不能运行。</p></li></ul><p>进程的创建：为该进程生成一个PCB。<br>进程的终止：回收它的PCB。<br>进程的组织管理：通过对PCB的组织管理来实现。</p><h4 id="进程转换">进程转换</h4><ul class="lvl-0"><li class="lvl-2"><p>运行 --&gt; 阻塞</p></li></ul><ol><li class="lvl-3"><p>等待I/O的结果</p></li><li class="lvl-3"><p>等待某一进程提供输入</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>运行 --&gt; 就绪</p></li></ul><ol><li class="lvl-3"><p>运行进程用完了时间片</p></li><li class="lvl-3"><p>运行进程被中断，因为一高优先级进程处于就绪状态</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>就绪 --&gt; 运行</p></li></ul><ol><li class="lvl-3"><p>调度程序选择一个新的进程运行</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>阻塞 --&gt; 就绪</p></li></ul><ol><li class="lvl-3"><p>当所等待的事件发生时</p></li></ol><p>系统为每个进程都维护了一个PCB，用来描述进程的基本情况以及运行变化的过程，PCB是进程存在的唯一标志。</p><p>进程的创建：为该进程生成一个PCB；<br>进程的终止：回收它的PCB；<br>进程的组织管理：通过对PCB的组织管理来实现；</p><p>操作系统 PCB 进程管理块  <a href="https://blog.csdn.net/siriusol/article/details/106503794">CSDN</a></p><img src="./img/os6.png" width="500" height="350" /><h3 id="状态队列">状态队列</h3><ul class="lvl-0"><li class="lvl-2"><p>由操作系统来维护一组队列，用来表示系统当中所有进程的当前状态。</p></li><li class="lvl-2"><p>不同的状态分别用不同的队列来表示（运行队列、就绪队列、各种类型的阻塞队列）。</p></li><li class="lvl-2"><p>每个进程的PCB都根据它的状态加入到相应的队列当中，当一个进程的状态发生变化时，它的PCB从一个状态队列中脱离出来，加入到另外一个队列。</p></li></ul><h2 id="线程">线程</h2><p>比进程更小的独立运行的基本单位,满足以下特性：</p><ol><li class="lvl-3"><p>实体之间可以并发地执行；</p></li><li class="lvl-3"><p>实体之间共享相同的地址空间；</p></li></ol><h3 id="什么是线程">什么是线程</h3><p>进程是资源分配单位和操作系统保护单位，线程是CPU调度单位；进程拥有一个完整的资源平台，如代码、数据和堆，而线程只独享必不可少的资源如寄存器和栈线程同样具有就绪、阻塞和执行三种基本状态，同样具有状态之间的转换关系；线程能减少并发执行的时间和空间开销；线程 ＝ 轻量级进程（lightweight  process）</p><h2 id="进程间通信与同步">进程间通信与同步</h2><p>并发进程有两种关系：相互独立和关联。前者只竞争cpu使用，后者则需要进程间相互通信。</p><h3 id="进程间通信方式">进程间通信方式</h3><ul class="lvl-0"><li class="lvl-2"><p>低级通信：只能传递状态和整数值（控制信息）</p><ul class="lvl-2"><li class="lvl-4">信号量和信号</li></ul></li><li class="lvl-2"><p>高级通信：能够传送任意数量的数据</p><ul class="lvl-2"><li class="lvl-4">共享内存、消息传递、管道</li></ul></li></ul><h3 id="进程间互斥">进程间互斥</h3><ul class="lvl-0"><li class="lvl-2"><p>进程宏观上并发执行，依靠时钟中断来实现微观上轮流执行</p></li><li class="lvl-2"><p>访问共享资源</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进程1    </span></span><br><span class="line">tmp1 = count;</span><br><span class="line">tmp1 ++;</span><br><span class="line">count = tmp1;               </span><br><span class="line"><span class="comment">//进程2</span></span><br><span class="line">tmp2 = count;</span><br><span class="line">tmp2 = tmp2+<span class="number">2</span>;</span><br><span class="line">count = tmp2;</span><br></pre></td></tr></table></figure><p>假如不进一步限制，考虑这些语句的执行先后，最后count可能有1，2，3，4四种结果。</p><h4 id="竞争状态">竞争状态</h4><p>两个或多个进程对同一共享数据同时进行读写操作，而最后的结果是不可预测的，它取决于各个进程具体运行情况。<br>所以在同一个时刻只允许一个进程访问一个共享数据。<br>互斥指的就是进程不能访问正在被别的进程访问的数据。</p><p>对于竞争问题的抽象描述：<br>把一个进程在运行过程中所做的事情分为两类：</p><ul class="lvl-0"><li class="lvl-2"><p>进程内部的计算或其他的一些事情，肯定不会导致竞争状态的出现；</p></li><li class="lvl-2"><p>对共享内存或共享文件的访问，可能会导致竞争状态的出现。我们把完成这类事情的那段程序称为 <strong>临界区</strong> ，把需要互斥访问的共享资源称为 <strong>临界资源</strong>。</p></li></ul><p>如果我们能设计出某种方法，使得任何两个进程都不会同时出现在临界区中，就可以避免竞争状态的出现。</p><h4 id="互斥访问">互斥访问</h4><p>要实现互斥访问，一般要满足四个条件：</p><ol><li class="lvl-3"><p>任何两个进程都不能同时进入临界区；</p></li><li class="lvl-3"><p>不能事先假定CPU的个数和运行速度；</p></li><li class="lvl-3"><p>当一个进程运行在它的临界区外面时，不能妨碍其他的进程进入临界区；</p></li><li class="lvl-3"><p>任何一个进程进入临界区的要求应该在有限时间内得到满足。</p></li></ol><h3 id="基于关闭中断的互斥实现">基于关闭中断的互斥实现</h3><p>当一个进程进入临界区后，关闭所有的中断；当它退出临界区时，再打开中断。</p><ul class="lvl-0"><li class="lvl-2"><p>进程的切换是由中断引发的，关闭中断后，CPU不会被分配给其他进程，其他进程无法执行。</p></li><li class="lvl-2"><p>操作系统内核经常使用这种方法来更新内部的数据结构（变量、链表等）。</p></li></ul><h3 id="基于繁忙等待的互斥实现">基于繁忙等待的互斥实现</h3><h4 id="加锁标志位法">加锁标志位法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(lock);<span class="comment">//共享变量</span></span><br><span class="line">lock=<span class="number">1</span>;</span><br><span class="line">临界区</span><br><span class="line">lock=<span class="number">0</span>;</span><br><span class="line">```  </span><br><span class="line">lock的初始值为<span class="number">0</span>，当一个进程想进入临界区时，先查看lock的值，若为<span class="number">1</span>，说明已有进程在临界区，只好循环等待。等它变成了<span class="number">0</span>，才可进入。每个进程的操作类似。例如，图书馆借书。  </span><br><span class="line"></span><br><span class="line">但是关于lock也可能出现竞争问题。  </span><br><span class="line"></span><br><span class="line">#### 强制轮流法</span><br><span class="line"></span><br><span class="line">```C</span><br><span class="line"><span class="comment">//process 0</span></span><br><span class="line"><span class="keyword">while</span>(turn!=<span class="number">0</span>);</span><br><span class="line">临界区</span><br><span class="line">turn=<span class="number">1</span>;</span><br><span class="line">非临界区</span><br><span class="line"></span><br><span class="line"><span class="comment">//process 1</span></span><br><span class="line"><span class="keyword">while</span>(turn!=<span class="number">1</span>);</span><br><span class="line">临界区</span><br><span class="line">turn=<span class="number">0</span>;</span><br><span class="line">非临界区</span><br><span class="line">```  </span><br><span class="line">基本思想：每个进程严格地按照轮流的顺序来进入临界区。</span><br><span class="line">优点：保证在任何时刻最多只有一个进程在临界区</span><br><span class="line">缺点：违反了互斥访问四条件中的第三个条件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### Peterson方法</span><br><span class="line"></span><br><span class="line">```C</span><br><span class="line"><span class="comment">//process 0</span></span><br><span class="line">enter_region(<span class="number">0</span>);</span><br><span class="line">临界区</span><br><span class="line">leave_region(<span class="number">0</span>);</span><br><span class="line">非临界区</span><br><span class="line"></span><br><span class="line"><span class="comment">//process 1</span></span><br><span class="line">enter_region(<span class="number">1</span>);</span><br><span class="line">临界区</span><br><span class="line">leave_region(<span class="number">1</span>);</span><br><span class="line">非临界区</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">当一个进程想进入临界区时，先调用enter_region函数，判断是否能安全进入，不能的话等待；当它从临界区退出后，需调用leave_region函数，允许其它进程进入临界区。两个函数的参数均为进程号。  </span><br><span class="line"></span><br><span class="line">```C</span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  FALSE  0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  TRUE    1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>   N           2<span class="comment">// 进程的个数  </span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  turn;<span class="comment">// 轮到谁？</span></span><br><span class="line"><span class="type">int</span>  interested[N];<span class="comment">// 兴趣数组，初始值均为FALSE</span></span><br><span class="line"><span class="type">void</span>  <span class="title function_">enter_region</span> <span class="params">( <span class="type">int</span>  process)</span><span class="comment">// process = 0 或 1</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span>  other;<span class="comment">// 另外一个进程的进程号</span></span><br><span class="line">        other  =  <span class="number">1</span>  -  process;</span><br><span class="line">        interested[process]  =  TRUE;<span class="comment">// 表明本进程感兴趣</span></span><br><span class="line">        turn  =  process;<span class="comment">// 设置标志位</span></span><br><span class="line">        <span class="keyword">while</span>( turn == process &amp;&amp; interested[other] == TRUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>  <span class="title function_">leave_region</span> <span class="params">( <span class="type">int</span>  process)</span></span><br><span class="line">&#123;</span><br><span class="line">      interested[process]  =  FALSE;<span class="comment">// 本进程已离开临界区</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关于peterson算法的重要性，可以自行搜索。</p><h4 id="新的问题">新的问题</h4><p>以上的各种方法，都是基于繁忙等待(busy waiting)的策略，都可归纳为一种形式：当一个进程想要进入它的临界区时，首先检查一下是否允许它进入，若允许，就直接进入了；若不允许，就在那里循环地等待，一直等到允许它进入（如何使用？）。</p><p>缺点：</p><ol><li class="lvl-3"><p>浪费CPU时间；</p></li><li class="lvl-3"><p>可能导致预料之外的结果如：一个低优先级进程位于临界区中，这时有一个高优先级的进程也试图进入临界区<br>一个低优先级的进程正在临界区中；另一个高优先级的进程就绪了；调度器把CPU分配给高优先级的进程；该进程也想进入临界区；高优先级进程将会循环等待，等待低优先级进程退出临界区；低优先级进程无法获得CPU，无法离开临界区。</p></li></ol><p><strong>如何解决？</strong></p><ol><li class="lvl-3"><p>当一个进程无法进入临界区时，应该被阻塞起来（sleep）；</p></li><li class="lvl-3"><p>当一个进程离开临界区时，需要去唤醒（wake up）被阻塞的进程；</p></li><li class="lvl-3"><p>克服了繁忙等待方法的两个缺点（浪费CPU时间、可能死锁）。</p></li></ol><p>现有的进程互斥问题形式：两个或多个进程都想进入各自的临界区，但在任何时刻，只允许一个进程进入临界区。</p><p>新的进程互斥问题形式：两个或多个进程都想进入各自的临界区，但在任何时刻，只允许 N 个进程同时进入临界区（N ≥ 1）。</p><h3 id="信号量">信号量</h3><p>1965年由著名的荷兰计算机科学家Dijkstra提出，其基本思路是用一种新的变量类型 <code>semaphore</code> 来记录当前可用资源的数量。</p><p><code>semaphore</code>的取值可正可负，正数表示当前空闲资源的数量，负数的绝对值表示正在等待进入临界区的进程个数。</p><p>信号量是由操作系统来维护的，用户进程只能通过初始化和两个标准原语（P、V原语）来访问。初始化可指定一个非负整数，即空闲资源总数。</p><p>P、V原语包含有进程的阻塞和唤醒机制，因此在进程等待进入临界区时不会浪费CPU时间；</p><p>P原语：申请一个空闲资源（把信号量减1），若成功，则退出；若失败，则该进程被阻塞；<br>V原语：释放一个被占用的资源（把信号量加1），若发现有被阻塞的进程，则选择一个唤醒之。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span>   <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  <span class="type">int</span>   count;<span class="comment">// 计数变量        </span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span>  <span class="title">PCB</span> *<span class="title">queue</span>;</span><span class="comment">// 进程等待队列</span></span><br><span class="line">  &#125; semaphore;</span><br><span class="line"></span><br><span class="line">P( semaphore  S)&#123;</span><br><span class="line">  --S.count;<span class="comment">//表示申请一个资源;</span></span><br><span class="line">  <span class="keyword">if</span> (S.count &lt; <span class="number">0</span>)<span class="comment">//表示没有空闲资源;</span></span><br><span class="line">  &#123;</span><br><span class="line">      该进程进入等待队列S.<span class="built_in">queue</span>末尾;</span><br><span class="line">      阻塞该进程;</span><br><span class="line">      调用进程调度器；<span class="comment">// OSSched( )</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">V( semaphore  S)&#123;</span><br><span class="line">  ++S.count;<span class="comment">//表示释放一个资源;</span></span><br><span class="line">  <span class="keyword">if</span> (S.count &lt;= <span class="number">0</span>)<span class="comment">//表示有进程被阻塞;</span></span><br><span class="line">  &#123;</span><br><span class="line">      从等待队列S.<span class="built_in">queue</span>中取出一个进程;</span><br><span class="line">      把该进程改为就绪状态，插入就绪队列</span><br><span class="line">  &#125;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="进程间同步">进程间同步</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;第二讲 进程管理&lt;/h1&gt;
&lt;h2 id=&quot;2-1-2-什么是进程&quot;&gt;2.1.2 什么是进程&lt;/h2&gt;
&lt;ol&gt;
&lt;li class=&quot;lvl-3&quot;&gt;
&lt;p&gt;程序的代码&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-3&quot;&gt;
&lt;p&gt;程序的数据&lt;/p&gt;
&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    <category term="操作系统" scheme="https://yours22.github.io/project/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="基础" scheme="https://yours22.github.io/project/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统-存储管理.md</title>
    <link href="https://yours22.github.io/project/2024/04/08/OS-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/"/>
    <id>https://yours22.github.io/project/2024/04/08/OS-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</id>
    <published>2024-04-08T11:27:50.000Z</published>
    <updated>2024-04-15T13:07:31.696Z</updated>
    
    <content type="html"><![CDATA[<h1>存储管理</h1><h2 id="概述">概述</h2><h2 id="单道程序存储管理">单道程序存储管理</h2><h2 id="分区存储管理">分区存储管理</h2><h3 id="固定分区存储管理">固定分区存储管理</h3><h3 id="可变分区存储管理">可变分区存储管理</h3><h3 id="地址映射（重定位）">地址映射（重定位）</h3><h2 id="页式和段式存储管理">页式和段式存储管理</h2><h3 id="页式存储管理">页式存储管理</h3><h4 id="基本原理">基本原理</h4><ul class="lvl-0"><li class="lvl-2"><p>把物理内存划分为许多个固定大小的内存块，称为物理页面，或页框（page frame）；</p></li><li class="lvl-2"><p>把逻辑地址空间划分为大小相同的块，称为逻辑页面，或简称页面（page）；</p></li><li class="lvl-2"><p>页面大小为2n，一般在512字节到8K字节之间；</p></li><li class="lvl-2"><p>当一个用户程序装入内存时，以页面为单位进行分配。若要运行一个大小为n个页面的程序，需要有n个空闲的物理页面把它装入，这些页面不必是连续的。</p></li></ul><h4 id="数据结构">数据结构</h4><ul class="lvl-0"><li class="lvl-2"><p>页表（数组）系统为每一个进程都建立了一个页表，页表给出了逻辑页面号和具体内存块号（物理页面号）之间的对应关系。</p></li><li class="lvl-2"><p>物理页面表：在系统中设立一张物理页面表，用来描述内存空间当中，各个物理页面的分配使用状况。具体实现：位示图，空闲页面链表。</p></li></ul><h4 id="内存的分配与回收">内存的分配与回收</h4><ul class="lvl-0"><li class="lvl-2"><p>内存的分配与回收算法与物理页面表的具体实现方法有关。这里以位示图为例。</p></li><li class="lvl-2"><p>内存的分配：</p><ul class="lvl-2"><li class="lvl-4">计算一个进程所需要的页面数N，并查看位示图，看是否还有N个空闲页面；</li><li class="lvl-4">若有，则申请一个页表，其长度为N，并把页表的起始地址填入PCB；</li><li class="lvl-4">分配N个空闲物理页面，将其编号填入页表；</li><li class="lvl-4">修改位示图（0→1，空闲页面数－N）</li></ul></li></ul><h4 id="地址映射">地址映射</h4><p>一个进程的各个连续的逻辑页面，被分散地装入到内存的各个物理页面当中，在这种情形下，怎样才能保证程序能够正确地运行？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;存储管理&lt;/h1&gt;
&lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;
&lt;h2 id=&quot;单道程序存储管理&quot;&gt;单道程序存储管理&lt;/h2&gt;
&lt;h2 id=&quot;分区存储管理&quot;&gt;分区存储管理&lt;/h2&gt;
&lt;h3 id=&quot;固定分区存储管理&quot;&gt;固定分区存储管理&lt;/h3&gt;
&lt;h3 id=&quot;可变分区存储</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Jetson AGX Orin 3D Gaussian Splatting测试</title>
    <link href="https://yours22.github.io/project/2024/04/02/JetsonAGXOrin-Jetson-AGX-Orin-3D-Gaussian-Splatting%E6%B5%8B%E8%AF%95/"/>
    <id>https://yours22.github.io/project/2024/04/02/JetsonAGXOrin-Jetson-AGX-Orin-3D-Gaussian-Splatting%E6%B5%8B%E8%AF%95/</id>
    <published>2024-04-02T14:16:45.447Z</published>
    <updated>2024-04-02T14:19:03.827Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Jtop">安装Jtop</h2><p>Jtop 是Jetson系列开发板上，实时监控 CPU，GPU，内存 等硬件设备使用情况，同时方便开启风扇以及更改风扇的转数的一款库。</p><pre><code class="language-bash">sudo apt-get updatesudo apt install python3-pip# 安装pip3sudo -H pip3 install -U jetson-stats# 安装jtopsudo systemctl restart jetson_stats.service# 运行jtop服务reboot# 重启系统# 可以通过如下命令进行监控jtop</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装Jtop&quot;&gt;安装Jtop&lt;/h2&gt;
&lt;p&gt;Jtop 是Jetson系列开发板上，实时监控 CPU，GPU，内存 等硬件设备使用情况，同时方便开启风扇以及更改风扇的转数的一款库。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo</summary>
      
    
    
    
    <category term="Jetson" scheme="https://yours22.github.io/project/categories/Jetson/"/>
    
    <category term="环境配置" scheme="https://yours22.github.io/project/categories/Jetson/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构与算法-树.ms</title>
    <link href="https://yours22.github.io/project/2024/04/02/DSA-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95C6-%E6%A0%91/"/>
    <id>https://yours22.github.io/project/2024/04/02/DSA-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95C6-%E6%A0%91/</id>
    <published>2024-04-02T11:49:44.000Z</published>
    <updated>2024-04-02T12:58:02.002Z</updated>
    
    <content type="html"><![CDATA[<h1>树</h1><p>一直听过但没学过。今天看看。</p><h2 id="树的基本术语">树的基本术语</h2><ol><li class="lvl-3">结点(node)</li><li class="lvl-3">度(degree)：结点的子女个数即为该结点的度；树中各个结点的度的最大</li><li class="lvl-3">值称为树的度。</li><li class="lvl-3">叶结点(Leaf)：度为0的结点即为叶结点，亦称为终端结点。</li><li class="lvl-3">分支结点(branch)：度不为0的结点即为分支结点，亦称为非终端结点。</li><li class="lvl-3">子女结点(child)：若结点的子树非空，结点子树的根即为该结点的子女。</li><li class="lvl-3">父节点(parent)：若结点有子女，该结点是父节点。</li><li class="lvl-3">兄弟结点(sibling)：同一结点的子女互称为兄弟。</li><li class="lvl-3">祖先结点(ancestor)：某结点到根结点的路径上的各个结点都是该结点的祖先。</li><li class="lvl-4">子孙结点(descendant)：某结点的所有下属结点，都是该结点的子孙。</li><li class="lvl-4">结点的层次：规定根结点在第1层，其子女结点的层次等于它的层次加1。以下类推。</li><li class="lvl-4">深度：结点的深度即为结点的层次；离根最远结点的层次即为树的深度</li><li class="lvl-4">高度：规定叶结点的高度为1，其父结点的高度等于它的高度加1。</li><li class="lvl-4">树的高度：等于根结点的高度，即根结点所有子女高度的最大值加1。</li><li class="lvl-4">树的高度与深度计算方向相反。有序树：树中结点的各棵子树T0, T1, …是有次序的，即为有序树。</li><li class="lvl-4">无序树：树中结点的各棵子树之间的次序是不重要的，可以互相交换位置。</li><li class="lvl-4">森林：森林是m（m≥0）棵树的集合。</li></ol><h2 id="树的抽象数据类型">树的抽象数据类型</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tree</span> &#123;</span></span><br><span class="line"> <span class="comment">//对象: 树是由n (≥0) 个结点组成的有限集合。在类界面中的position 是树中</span></span><br><span class="line">结点的地址。在顺序存储方式下是下标型, 在链表存储方式下是指针型</span><br><span class="line"><span class="comment">// T 是树结点中存放数据的类型, 要求所有结点的数据类型都是一致的。</span></span><br><span class="line">    public:</span><br><span class="line">    Tree ();</span><br><span class="line">    ~Tree ();</span><br><span class="line">    position <span class="title function_">Root</span><span class="params">()</span>; <span class="comment">//返回根结点地址，若树为空，返回0</span></span><br><span class="line">    <span class="number">23</span></span><br><span class="line">    BuildRoot (<span class="type">const</span> T&amp; value);  </span><br><span class="line">    <span class="comment">//建立树的根结点</span></span><br><span class="line">    position <span class="title function_">FirstChild</span><span class="params">(position p)</span>;</span><br><span class="line">    <span class="comment">//返回p 的第一个子女地址, 无子女返回0</span></span><br><span class="line">    position <span class="title function_">NextSibling</span><span class="params">(position p)</span>;</span><br><span class="line">    <span class="comment">//返回p 的下一兄弟地址, 若无下一兄弟返回0 </span></span><br><span class="line">    position <span class="title function_">Parent</span><span class="params">(position p)</span>;</span><br><span class="line">    <span class="comment">//返回p 的双亲结点地址, 若p 为根返回0</span></span><br><span class="line">    T <span class="title function_">getData</span><span class="params">(position p)</span>;</span><br><span class="line">    <span class="comment">//返回结点p 中存放的值</span></span><br><span class="line">    <span class="type">bool</span> <span class="title function_">InsertChild</span><span class="params">(position p, T&amp; value)</span>;</span><br><span class="line">    <span class="comment">//在结点p 下插入值为value 的新子女, 若插</span></span><br><span class="line">    <span class="comment">//入失败, 函数返回false, 否则返回true</span></span><br><span class="line">    <span class="type">bool</span> <span class="title function_">DeleteChild</span> <span class="params">(position p, <span class="type">int</span> i)</span>;</span><br><span class="line">    <span class="comment">//删除结点p的第i个子女及其全部子孙结</span></span><br><span class="line">    <span class="comment">//点, 若删除失败, 则返回false, 否则返回true</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">DeleteSubTree</span> <span class="params">(position t)</span>;</span><br><span class="line">    <span class="comment">//删除以t为根结点的子树</span></span><br><span class="line">    <span class="type">bool</span> <span class="title function_">IsEmpty</span> <span class="params">()</span>;</span><br><span class="line">    <span class="comment">//判树空否, 若空则返回true, 否则返回false</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">Traversal</span> <span class="params">(<span class="type">void</span> (*visit)(position p))</span>;</span><br><span class="line">    <span class="comment">//遍历以p为根的子树, visit是用户自编的访问函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树">二叉树</h2><p>一棵二叉树是结点的一个有限集合，该集合或者为空，或者是由一个根结点加上两棵分别称为左子树和右子树的、互不相交的二叉树组成（子树有左右之分，次序不能颠倒 ）</p><h3 id="二叉树的链表表示">二叉树的链表表示</h3><ul class="lvl-0"><li class="lvl-2"><p>二叉链表：<br>二叉树结点定义：每个结点有3个数据成员：<br>data域存储结点数据<br>leftChild和rightChild分别存放指向左子女和右子女的指针</p></li><li class="lvl-2"><p>三叉链表每个结点增加一个指向双亲的指针parent，使得查找双亲也很方便。</p></li></ul><h3 id="特殊的二叉树">特殊的二叉树</h3><ul class="lvl-0"><li class="lvl-2"><p>满二叉树</p></li><li class="lvl-2"><p>完全二叉树</p></li><li class="lvl-2"><p>正则二叉树</p></li><li class="lvl-2"><p>理想平衡二叉树</p></li></ul><h2 id="二叉树遍历">二叉树遍历</h2><p>二叉树的遍历就是按某种次序访问树中的结点，要求每个结点访问一次且仅访问一次。设访问根结点记作V<br>遍历根的左子树记作L<br>遍历根的右子树记作R<br>则可能的遍历次序有<br>前序 VLR 镜像 VRL<br>中序 LVR 镜像 RVL<br>后序 LRV 镜像 RLV</p><h3 id="中序遍历（Inorder-Traversal）">中序遍历（Inorder Traversal）</h3><ol><li class="lvl-3"><p>若空。</p></li><li class="lvl-3"><p>中序遍历左子树。</p></li><li class="lvl-3"><p>访问跟节点。</p></li><li class="lvl-3"><p>中序遍历右子树。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;树&lt;/h1&gt;
&lt;p&gt;一直听过但没学过。今天看看。&lt;/p&gt;
&lt;h2 id=&quot;树的基本术语&quot;&gt;树的基本术语&lt;/h2&gt;
&lt;ol&gt;
&lt;li class=&quot;lvl-3&quot;&gt;结点(node)&lt;/li&gt;
&lt;li class=&quot;lvl-3&quot;&gt;度(degree)：结点的子女个数即为该结点的度</summary>
      
    
    
    
    <category term="DSA" scheme="https://yours22.github.io/project/categories/DSA/"/>
    
    <category term="Basic" scheme="https://yours22.github.io/project/categories/DSA/Basic/"/>
    
    
  </entry>
  
  <entry>
    <title>WebSocket基础.md</title>
    <link href="https://yours22.github.io/project/2024/04/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-WebSocket%E5%9F%BA%E7%A1%80/"/>
    <id>https://yours22.github.io/project/2024/04/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-WebSocket%E5%9F%BA%E7%A1%80/</id>
    <published>2024-04-02T07:47:31.000Z</published>
    <updated>2024-04-02T07:47:45.328Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>数据结构与算法-哈希</title>
    <link href="https://yours22.github.io/project/2024/03/20/DSA-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%93%88%E5%B8%8C/"/>
    <id>https://yours22.github.io/project/2024/03/20/DSA-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%93%88%E5%B8%8C/</id>
    <published>2024-03-20T03:02:13.000Z</published>
    <updated>2024-03-21T08:58:50.204Z</updated>
    
    <content type="html"><![CDATA[<h1>哈希</h1><p>之前没学过，记一下。</p><p>哈希表也叫散列表，哈希表是一种数据结构，它提供了快速的插入操作和查找操作，无论哈希表总中有多少条数据，插入和查找的时间复杂度都是为O(1)，因为哈希表的查找速度非常快，所以在很多程序中都有使用哈希表，例如拼音检查器。</p><p>哈希表也有自己的缺点，哈希表是基于数组的，我们知道数组创建后扩容成本比较高，所以当哈希表被填满时，性能下降的比较严重。</p><p>本篇摘录自 <a href="https://zhuanlan.zhihu.com/p/144296454">知乎</a></p><h2 id="哈希函数">哈希函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> final <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == null) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line">这个函数的工作原理如下：</span><br><span class="line"></span><br><span class="line">如果键（key）为 null，那么哈希值就是 <span class="number">0</span>。</span><br><span class="line"></span><br><span class="line">如果键（key）不为 null，那么首先调用键（key）的 hashCode() 方法来获取一个整数，这个整数是由对象的内部地址转换得到的。</span><br><span class="line"></span><br><span class="line">然后，这个整数（h）被自己右移 <span class="number">16</span> 位（h &gt;&gt;&gt; <span class="number">16</span>）后与自己进行异或操作（h ^ (h &gt;&gt;&gt; <span class="number">16</span>)）。这个操作的目的是为了减少哈希冲突，也就是不同的键（key）映射到同一个位置的情况。</span><br><span class="line"></span><br><span class="line">这个哈希函数的结果会被用作在哈希表中查找键（key）的位置。这是一个非常重要的步骤，因为它决定了哈希表的性能：一个好的哈希函数可以均匀地将键（key）分布在哈希表中，从而最大化地减少哈希冲突，提高查找效率。  </span><br><span class="line"></span><br><span class="line">## 哈希冲突  </span><br><span class="line">常用开放地址法和链表法解决哈希冲突。  </span><br><span class="line"></span><br><span class="line">### 开放地址法  </span><br><span class="line">在开放地址法中有三种方式来寻找其他的位置，分别是 **「线性探测」、「二次探测」、「双哈希法」**  </span><br><span class="line"></span><br><span class="line">#### 暂略  </span><br><span class="line"></span><br><span class="line">### 链表法  </span><br><span class="line">每个数组元素对应一条链表。通过某项关键字通过哈希后落到哈希表中的某个位置（数组元素）  </span><br><span class="line">这样，即使发生“哈希冲突”，也只需要把这个数据添加到链表中，而不需要在原始数据中寻找空位来存储。  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">“「链表法」解决哈希冲突代码比较简单，但是代码比较多，因为需要维护一个链表的操作，我们这里采用有序链表，有序链表不能加快成功的查找，但是可以减少不成功的查找时间，因为只要有一项比查找值大，就说明没有我们需要查找的值，删除时间跟查找时间一样，有序链表能够缩短删除时间。但是有序链表增加了插入时间，我们需要在有序链表中找到正确的插入位置。”</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## <span class="number">1.</span> 两数之和  </span><br><span class="line">给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</span><br><span class="line"></span><br><span class="line">你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</span><br><span class="line"></span><br><span class="line">你可以按任意顺序返回答案。  </span><br><span class="line"></span><br><span class="line">```Java</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line">    public <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target)&#123;</span><br><span class="line">        Map&lt;Integar,Integar&gt; <span class="built_in">map</span> =new HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>.containsKey(target-nums[i]))&#123;</span><br><span class="line">                <span class="keyword">return</span> new <span class="type">int</span>[] &#123;<span class="built_in">map</span>.get(target-nums[i])</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">map</span>.put(nums[i],i);</span><br><span class="line">            &#125;</span><br><span class="line">            throw new IllegalArgumentException(<span class="string">&quot;No two sum solution&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;哈希&lt;/h1&gt;
&lt;p&gt;之前没学过，记一下。&lt;/p&gt;
&lt;p&gt;哈希表也叫散列表，哈希表是一种数据结构，它提供了快速的插入操作和查找操作，无论哈希表总中有多少条数据，插入和查找的时间复杂度都是为O(1)，因为哈希表的查找速度非常快，所以在很多程序中都有使用哈希表，例如拼音检查器</summary>
      
    
    
    
    <category term="DSA" scheme="https://yours22.github.io/project/categories/DSA/"/>
    
    <category term="leetcode" scheme="https://yours22.github.io/project/categories/DSA/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构与算法-双指针</title>
    <link href="https://yours22.github.io/project/2024/03/18/DSA-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    <id>https://yours22.github.io/project/2024/03/18/DSA-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%8F%8C%E6%8C%87%E9%92%88/</id>
    <published>2024-03-18T03:09:29.000Z</published>
    <updated>2024-03-18T03:21:31.968Z</updated>
    
    <content type="html"><![CDATA[<p>写几道Hot100里面的双指针。</p><h2 id="283-交换0-不影响原顺序">283  交换0 不影响原顺序</h2><p>这个比较简单。双指针设置为最左边的两个，向右移动，当慢指针碰到0时停止移动，快指针继续，碰到第一个非0时交换这两个数即可。<br>这样时间复杂度为O(n)。</p><h2 id="11-盛最多水的容器">11 盛最多水的容器</h2><p>在写leetcode第十一题时，对于算法为什么是正确的不是很清楚。</p><p>如果直接遍历的话会时间超限。<br>采用双指针。一个在左一个在右。记录面积，然后向中间移动较短的指针即可，直至两指针相遇。</p><p>这个题解讲清楚了双指针是如何缩减搜索空间的。  <a href="https://leetcode.cn/problems/container-with-most-water/solutions/94102/on-shuang-zhi-zhen-jie-fa-li-jie-zheng-que-xing-tu/?envType=study-plan-v2&amp;envId=top-100-liked">Leetcode</a></p><h2 id=""></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;写几道Hot100里面的双指针。&lt;/p&gt;
&lt;h2 id=&quot;283-交换0-不影响原顺序&quot;&gt;283  交换0 不影响原顺序&lt;/h2&gt;
&lt;p&gt;这个比较简单。双指针设置为最左边的两个，向右移动，当慢指针碰到0时停止移动，快指针继续，碰到第一个非0时交换这两个数即可。&lt;br&gt;
这样</summary>
      
    
    
    
    <category term="DSA" scheme="https://yours22.github.io/project/categories/DSA/"/>
    
    <category term="leetcode" scheme="https://yours22.github.io/project/categories/DSA/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Jetson AGX Orin Mediapipe 安装测试</title>
    <link href="https://yours22.github.io/project/2024/03/14/JetsonAGXOrin-Jetson-AGX-Orin-Mediapipie-%E5%AE%89%E8%A3%85%E6%B5%8B%E8%AF%95/"/>
    <id>https://yours22.github.io/project/2024/03/14/JetsonAGXOrin-Jetson-AGX-Orin-Mediapipie-%E5%AE%89%E8%A3%85%E6%B5%8B%E8%AF%95/</id>
    <published>2024-03-14T13:47:27.000Z</published>
    <updated>2024-03-18T11:08:23.590Z</updated>
    
    <content type="html"><![CDATA[<h1>Mediapipe 安装测试</h1><p>具体过程参考在Jetson Nano上的文章 <a href="https://blog.csdn.net/qq_56548850/article/details/123981579">CSDN</a></p><p>基本介绍：</p><p>1.介绍<br>MediaPipe是一款由Google开发并开源的数据流处理机器学习应用开发框架。它是一个基于图的数据处理管线，用于构建使用了多种形式的数据源，如视频、音频、传感器数据以及任何时间序列数据。MediaPipe通过将各个感知模型抽象为模块并将其连接到可维护的图中来解决这些问题。优点：</p><ul class="lvl-0"><li class="lvl-2"><p>有效管理资源(CPU和GPU)达到低延迟性能</p></li><li class="lvl-2"><p>处理诸如音频和视频帧之类的时间序列数据的同步</p></li><li class="lvl-2"><p>并测量性能和资源消耗（目前Google正在开发，尚未开源）</p></li></ul><p>MediaPipe的主要组件包括：</p><p>(1) 图（Graph）-有向图<br>(2) 数据包（Packet）<br>(3) 节点（Node）<br>(4) 数据流（Stream）<br>(5) 图配置（GraphConfig）<br>(6) 计算单元（Caculator）<br>(7) 子图（Subgraph）</p><h2 id="安装编译器-Bazel-4-0-0">安装编译器 Bazel 4.0.0</h2><p>没有Ubuntu 22.04对应版本，似乎要下载源码自行编译。<br>参考官方文档 <a href="https://docs.bazel.build/versions/4.0.0/install-compile-source.html">Bazel</a><br>好像github上没有4.0.0了。</p><p>安装最新版，切换到对应目录后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash ./compile.sh</span><br><span class="line">sudo <span class="built_in">cp</span> output/bazel /usr/local/bin</span><br></pre></td></tr></table></figure><p>运行第一条命令后报错：</p><pre><code>JDK Version(1.11) is lower than 21, please set $JAVA_HOME  </code></pre><p>装了半天没装上，寄。Java安装也太反人类了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Mediapipe 安装测试&lt;/h1&gt;
&lt;p&gt;具体过程参考在Jetson Nano上的文章 &lt;a href=&quot;https://blog.csdn.net/qq_56548850/article/details/123981579&quot;&gt;CSDN&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;基本介绍</summary>
      
    
    
    
    <category term="Jetson" scheme="https://yours22.github.io/project/categories/Jetson/"/>
    
    <category term="环境配置" scheme="https://yours22.github.io/project/categories/Jetson/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>Jetson Orin</title>
    <link href="https://yours22.github.io/project/2024/03/14/JetsonAGXOrin-Jetson-Orin%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://yours22.github.io/project/2024/03/14/JetsonAGXOrin-Jetson-Orin%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2024-03-14T13:47:27.000Z</published>
    <updated>2024-04-16T07:57:45.884Z</updated>
    
    <content type="html"><![CDATA[<h1>Jetson Orin 环境配置</h1><p>Jetson AGX Orin<br>Ubuntu 22.04</p><h2 id="浏览器安装">浏览器安装</h2><p>因为校园网要认证捏，可以先用手机热点。</p><h2 id="安装-torch-和-torchvision-和-cuda-等">安装 torch 和 torchvision 和 cuda 等</h2><p>注意版本和安装系统即可。<br>之后再补全。</p><p>后续测试3D Gaussian Splatting时发现要求cuda11，而Orin Ubuntu 22.04似乎只兼容cuda12。<br>暂时打算重装，换成20.04。</p><p>24.4.9更新：<br>jetpack 5.1.3，其中<br>cuda11.4。安装torch1.14.0a0+44dac51c.nv23.02<br>注意要用python3.8。选用TensoRT 8.2 GA Update 4 for Ubuntu 20.04 and CUDA 11.4 TAR package<br>注意是 TensorRT 8.2 GA Update 4 for ARM SBSA<br>torchvision版本官方文档尚未更新。选取0.14测试，暂时未出现问题。</p><h3 id="测试">测试</h3><p>测试torch能否正确调用cuda</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="comment"># 以下代码只有在PyTorch GPU版本上才会执行</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="built_in">print</span>(torch.__version__)</span><br><span class="line"><span class="built_in">print</span>(torch.cuda.is_available())</span><br><span class="line">a = torch.randn(<span class="number">10000</span>,<span class="number">1000</span>)</span><br><span class="line">b = torch.randn(<span class="number">1000</span>,<span class="number">2000</span>)</span><br><span class="line">t0 = time.time()</span><br><span class="line">c = torch.matmul(a,b)</span><br><span class="line">t1 = time.time()</span><br><span class="line"><span class="built_in">print</span>(a.device,t1-t0,c.norm(<span class="number">2</span>))</span><br><span class="line"> </span><br><span class="line">device = torch.device(<span class="string">&#x27;cuda&#x27;</span>)</span><br><span class="line">a = a.to(device)</span><br><span class="line">b = b.to(device)</span><br><span class="line">t0 = time.time()</span><br><span class="line">c = torch.matmul(a,b)</span><br><span class="line">t1 = time.time()</span><br><span class="line"><span class="built_in">print</span>(a.device,t1-t0,c.norm(<span class="number">2</span>))</span><br><span class="line"> </span><br><span class="line">t0 = time.time()</span><br><span class="line">c = torch.matmul(a,b)</span><br><span class="line">t1 = time.time()</span><br><span class="line"><span class="built_in">print</span>(a.device,t1-t0,c.norm(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>本文参考 <a href="https://zhuanlan.zhihu.com/p/640233255">知乎</a></p><h2 id="安装yolov5">安装yolov5</h2><h3 id="什么是yolov5">什么是yolov5</h3><p>待补充</p><h3 id="具体过程">具体过程</h3><h4 id="安装">安装</h4><pre><code class="language-bash">#Step 1. Access the terminal of Jetson device, install pip and upgrade itsudo apt updatesudo apt install -y python3-pippip3 install --upgrade pipgit clone https://github.com/ultralytics/yolov5cd yolov5# 然后把torch和torchvision注释掉，这两个需要单独安装vim requirements.txt# torch&gt;=1.7.0# torchvision&gt;=0.8.1sudo apt install -y libfreetype6-devpip3 install -r requirements.txt</code></pre><h2 id="yolov5测试">yolov5测试</h2><p>参考<a href="https://blog.csdn.net/Monajim/article/details/121179797">CSDN</a></p><p>环境配置好后，下载Yolov5预训练模型<br><a href="https://github.com/ultralytics/yolov5/releases">GitHub</a><br>下载模型：Yolo预训练模型：<a href="http://Yolov5s.pt">Yolov5s.pt</a>、<a href="http://Yolov5m.pt">Yolov5m.pt</a>、<a href="http://Yolov5l.pt">Yolov5l.pt</a>、<a href="http://Yolov5x.pt">Yolov5x.pt</a>  并放至Yolov5的根目录</p><h3 id="图片测试">图片测试</h3><h3 id="视频测试">视频测试</h3><p>测试成功,但是发现帧率较低，只有20-30帧左右。</p><p>疑似是缓存速度限制了计算速度。经检查GPU和CPU占用率都比较低。</p><h2 id="tensorRT-测试？">tensorRT 测试？</h2><p>在重装系统后,在官网上找到对应版本下载并解压</p><h2 id="mediapipe">mediapipe</h2><h2 id="3D-Gaussian-Splatting">3D Gaussian Splatting</h2><p>待测试。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Jetson Orin 环境配置&lt;/h1&gt;
&lt;p&gt;Jetson AGX Orin&lt;br&gt;
Ubuntu 22.04&lt;/p&gt;
&lt;h2 id=&quot;浏览器安装&quot;&gt;浏览器安装&lt;/h2&gt;
&lt;p&gt;因为校园网要认证捏，可以先用手机热点。&lt;/p&gt;
&lt;h2 id=&quot;安装-torch-和-to</summary>
      
    
    
    
    <category term="Jetson" scheme="https://yours22.github.io/project/categories/Jetson/"/>
    
    <category term="环境配置" scheme="https://yours22.github.io/project/categories/Jetson/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>rcore-part0-环境配置</title>
    <link href="https://yours22.github.io/project/2024/03/11/OS-rcore-part1/"/>
    <id>https://yours22.github.io/project/2024/03/11/OS-rcore-part1/</id>
    <published>2024-03-11T02:50:04.000Z</published>
    <updated>2024-03-11T03:23:08.304Z</updated>
    
    <content type="html"><![CDATA[<p>目前来看主要是跟着两份文档走。</p><ol><li class="lvl-3">[rCore-Tutorial-Book-v3] (<a href="https://rcore-os.cn/rCore-Tutorial-Book-v3">https://rcore-os.cn/rCore-Tutorial-Book-v3</a>) 这一份操作过程可能不够详细，但是讲了操作系统的基础知识，可以做课程的补充复习。</li><li class="lvl-3"><a href="https://rcore-os.cn/rCore-Tutorial-deploy">rCore-Tutorial-V3</a>   这一份看上去是之前版本的指导书。某些地方会比上一份文档讲的更清楚。</li></ol><h1>环境配置</h1><p>按照 [rCore-Tutorial-Book-v3] (<a href="https://rcore-os.cn/rCore-Tutorial-Book-v3/chapter0/5setup-devel-env.html#gdb">https://rcore-os.cn/rCore-Tutorial-Book-v3/chapter0/5setup-devel-env.html#gdb</a>)教程操作即可。</p><p>有部分讲述不清楚的部分：</p><ol><li class="lvl-3"><p>文中的 <code>os</code> 目录指的是 <code>rCore-Tutorial-v3</code>,需要从github上克隆。</p></li></ol><pre><code class="language-bash">$ git clone https://github.com/rcore-os/rCore-Tutorial-v3.git$ cd rCore-Tutorial-v3/os$ make run</code></pre><ol start="2"><li class="lvl-3"><p>gdb调试的问题。原文太精简了，没太整明白。<br>实验书讨论区中有提到另一种方案（ 经本人验证后可以运行），参考GitBook上的内容 <a href="https://rcore-os.cn/rCore-Tutorial-deploy/docs/pre-lab/gdb.html">rCore-Tutorial-deploy</a><br>另外记一下实验书讨论区中的注意事项。</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>python2环境</p></li><li class="lvl-2"><p>不要编译版本太高的gdb，我最初选择编译的是gdb14.1，莫名报错编译失败，后来使用gdb10.1版本源码编译就成功了</p></li></ul><h5 id="因为没有试过markdown加引用，这次也不想研究这个，姑且先这样吧（或者我可以期待有人无聊地去pull-request吗">因为没有试过markdown加引用，这次也不想研究这个，姑且先这样吧（或者我可以期待有人无聊地去pull request吗</h5><ol start="3"><li class="lvl-3"><p>比较小白的问题。 编译安装后可以删掉解压后的安装包。不用留在原处污染目录（大概</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;目前来看主要是跟着两份文档走。&lt;/p&gt;
&lt;ol&gt;
&lt;li class=&quot;lvl-3&quot;&gt;[rCore-Tutorial-Book-v3] (&lt;a href=&quot;https://rcore-os.cn/rCore-Tutorial-Book-v3&quot;&gt;https://rcore-o</summary>
      
    
    
    
    <category term="操作系统" scheme="https://yours22.github.io/project/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="rCore" scheme="https://yours22.github.io/project/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/rCore/"/>
    
    
  </entry>
  
  <entry>
    <title>计网基础-1.md</title>
    <link href="https://yours22.github.io/project/2024/03/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%AE%A1%E7%BD%91%E5%9F%BA%E7%A1%80-1/"/>
    <id>https://yours22.github.io/project/2024/03/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%AE%A1%E7%BD%91%E5%9F%BA%E7%A1%80-1/</id>
    <published>2024-03-03T09:00:03.000Z</published>
    <updated>2024-03-03T09:08:43.553Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>postSQL基础-1.md</title>
    <link href="https://yours22.github.io/project/2024/03/03/%E6%95%B0%E6%8D%AE%E5%BA%93-SQL%E5%9F%BA%E7%A1%80-1/"/>
    <id>https://yours22.github.io/project/2024/03/03/%E6%95%B0%E6%8D%AE%E5%BA%93-SQL%E5%9F%BA%E7%A1%80-1/</id>
    <published>2024-03-03T08:56:58.000Z</published>
    <updated>2024-03-04T03:10:26.238Z</updated>
    
    <content type="html"><![CDATA[<h1>对象关系数据库系统（ORDBMS）和 PostgreSQL 基础</h1><p>参考链接 <a href="https://www.runoob.com/postgresql/postgresql-tutorial.html">菜鸟教程</a><br>对于太细节的东西不再记录，假如写的时候碰到了问题另做记录。</p><h2 id="安装-PostgreSQL">安装 PostgreSQL</h2><p>我是在wsl-Ubuntu 22.04 上安装的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install postgresql postgresql-client</span><br><span class="line">```  </span><br><span class="line">安装完毕后，系统会创建一个数据库超级用户 postgres，密码为空。登录用户并且进入psql控制台：  </span><br></pre></td></tr></table></figure><p>sudo -i -u postgres</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">验证安装成功：</span><br></pre></td></tr></table></figure><p>postgres@YoursName:~$ psql<br>psql (14.11 (Ubuntu 14.11-0ubuntu0.22.04.1))<br>Type “help” for help.</p><p>postgres=#</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">按照原教程，退出PostgreSQL提示符的命令是</span><br></pre></td></tr></table></figure><p>\q</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">不知道为什么，我这边的反应是：</span><br><span class="line">```shell</span><br><span class="line">postgres=# \q</span><br><span class="line">postgres@YourName:~$ q</span><br><span class="line">Command &#x27;q&#x27; not found, but can be installed with:</span><br><span class="line">snap install q                       # version 1.6.3-1, or</span><br><span class="line">apt  install python3-q-text-as-data  # version 3.1.6-1</span><br><span class="line">See &#x27;snap info q&#x27; for additional versions.</span><br></pre></td></tr></table></figure><p>最后我使用了 <code>Ctrl+D </code>快捷键退出psql控制台。</p><p>PostgreSQL 安装完成后默认是已经启动的，但是也可以通过下面的方式来手动启动服务。</p><pre><code>sudo /etc/init.d/postgresql start   # 开启sudo /etc/init.d/postgresql stop    # 关闭sudo /etc/init.d/postgresql restart # 重启</code></pre><h2 id="PostgreSQL特征">PostgreSQL特征</h2><ol><li class="lvl-3"><p>函数：通过函数，可以在数据库服务器端执行指令程序。</p></li><li class="lvl-3"><p>索引：用户可以自定义索引方法，或使用内置的 B 树，哈希表与 GiST 索引。</p></li><li class="lvl-3"><p>触发器：触发器是由SQL语句查询所触发的事件。如：一个INSERT语句可能触发一个检查数据完整性的触发器。触发器通常由INSERT或UPDATE语句触发。</p></li><li class="lvl-3"><p>多版本并发控制：PostgreSQL使用多版本并发控制（MVCC，Multiversion concurrency control）系统进行并发控制，该系统向每个用户提供了一个数据库的&quot;快照&quot;，用户在事务内所作的每个修改，对于其他的用户都不可见，直到该事务成功提交。</p></li><li class="lvl-3"><p>规则：规则（RULE）允许一个查询能被重写，通常用来实现对视图（VIEW）的操作，如插入（INSERT）、更新（UPDATE）、删除（DELETE）。</p></li><li class="lvl-3"><p>数据类型：包括文本、任意精度的数值数组、JSON 数据、枚举类型、XML 数据等。</p></li><li class="lvl-3"><p>全文检索：通过 Tsearch2 或 OpenFTS，8.3版本中内嵌 Tsearch2。</p></li><li class="lvl-3"><p>NoSQL：JSON，JSONB，XML，HStore 原生支持，至 NoSQL 数据库的外部数据包装器。</p></li><li class="lvl-3"><p>数据仓库：能平滑迁移至同属 PostgreSQL 生态的 GreenPlum，DeepGreen，HAWK 等，使用 FDW 进行 ETL。</p></li></ol><h2 id="PostgreSQL-数据类型">PostgreSQL 数据类型</h2><ol><li class="lvl-3"><p>数值类型</p></li><li class="lvl-3"><p>货币类型</p></li><li class="lvl-3"><p>字符类型</p></li><li class="lvl-3"><p>日期/时间类型</p></li><li class="lvl-3"><p>布尔类型</p></li><li class="lvl-3"><p>枚举类型</p></li><li class="lvl-3"><p>几何类型</p></li><li class="lvl-3"><p>网络地址类型</p></li><li class="lvl-3"><p>位串类型</p></li><li class="lvl-4"><p>文本搜索类型</p></li><li class="lvl-4"><p>UUID类型</p></li><li class="lvl-4"><p>XML类型</p></li><li class="lvl-4"><p>JSON类型</p></li><li class="lvl-4"><p>数组类型</p></li><li class="lvl-4"><p>复合类型</p></li><li class="lvl-4"><p>范围类型</p></li><li class="lvl-4"><p>对象标识符（OID）类型</p></li><li class="lvl-4"><p>伪类型</p></li></ol><h2 id="PostgreSQL-语法">PostgreSQL 语法</h2><p>有点太长了。建议直接查看 <a href="https://www.runoob.com/postgresql/postgresql-syntax.html">菜鸟教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;对象关系数据库系统（ORDBMS）和 PostgreSQL 基础&lt;/h1&gt;
&lt;p&gt;参考链接 &lt;a href=&quot;https://www.runoob.com/postgresql/postgresql-tutorial.html&quot;&gt;菜鸟教程&lt;/a&gt;&lt;br&gt;
对于太细节的东西</summary>
      
    
    
    
    <category term="PostgreSQL" scheme="https://yours22.github.io/project/categories/PostgreSQL/"/>
    
    <category term="BASIC" scheme="https://yours22.github.io/project/categories/PostgreSQL/BASIC/"/>
    
    
  </entry>
  
  <entry>
    <title>Java基础.md</title>
    <link href="https://yours22.github.io/project/2024/03/03/Java-Java%E5%9F%BA%E7%A1%80/"/>
    <id>https://yours22.github.io/project/2024/03/03/Java-Java%E5%9F%BA%E7%A1%80/</id>
    <published>2024-03-03T08:54:08.000Z</published>
    <updated>2024-03-03T09:08:43.543Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>数据结构与算法C1-线性表.md</title>
    <link href="https://yours22.github.io/project/2024/03/03/DSA-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95C1-%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <id>https://yours22.github.io/project/2024/03/03/DSA-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95C1-%E7%BA%BF%E6%80%A7%E8%A1%A8/</id>
    <published>2024-03-03T07:59:48.000Z</published>
    <updated>2024-03-12T02:15:08.201Z</updated>
    
    <content type="html"><![CDATA[<h1>线性表</h1><p>感觉以前看过，下了课慢慢补吧。</p><h2 id="Vector">Vector</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">vec</span><span class="params">(<span class="number">5</span>)</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">vec</span><span class="params">(<span class="number">10</span>,<span class="number">1</span>)</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">vec</span><span class="params">(tmp)</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">temp</span><span class="params">(vec.begin(),vec.begin()+<span class="number">3</span>)</span></span><br></pre></td></tr></table></figure><h3 id="迭代器-Iterators">迭代器(Iterators)</h3><p>算法和容器的桥梁。<br>将迭代器作为算法的参数、通过迭代器来访问容器而不是把容器直接作为算法的参数。<br>将函数对象作为算法的参数而不是将函数所执行的运算作为算法的一部分。</p><h2 id="线性表的抽象基类-LinearList-h">线性表的抽象基类 (LinearList.h)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="comment">//应用模板类描述线性表抽象数据类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinearList</span> &#123;</span>                  </span><br><span class="line">public:</span><br><span class="line">    LinearList(); <span class="comment">//构造函数</span></span><br><span class="line">    ~LinearList(); <span class="comment">//析构函数</span></span><br><span class="line">    virtual <span class="type">int</span> <span class="title function_">Size</span><span class="params">()</span> <span class="type">const</span> = <span class="number">0</span>;                   <span class="comment">//求表最大容量</span></span><br><span class="line">    virtual <span class="type">int</span> <span class="title function_">Length</span><span class="params">()</span> <span class="type">const</span> = <span class="number">0</span>;                 <span class="comment">//求表长度</span></span><br><span class="line">    virtual <span class="type">int</span> <span class="title function_">Search</span><span class="params">(T&amp; x)</span> <span class="type">const</span> = <span class="number">0</span>;             <span class="comment">//在表中搜索给定值x</span></span><br><span class="line">    virtual <span class="type">int</span> <span class="title function_">Locate</span><span class="params">(<span class="type">int</span> i)</span> <span class="type">const</span> = <span class="number">0</span>;            <span class="comment">//定位第i个元素</span></span><br><span class="line">    virtual <span class="type">bool</span> <span class="title function_">getData</span><span class="params">(<span class="type">int</span> i, T&amp; x)</span> <span class="type">const</span> = <span class="number">0</span>;    <span class="comment">//取第i个表项的值</span></span><br><span class="line">    virtual <span class="type">void</span> <span class="title function_">setData</span><span class="params">(<span class="type">int</span> i, T&amp; x)</span>= <span class="number">0</span>;           <span class="comment">//修改第i个表项的值  </span></span><br><span class="line">    virtual <span class="type">bool</span> <span class="title function_">Insert</span><span class="params">(<span class="type">int</span> i, T&amp; x)</span> = <span class="number">0</span>;           <span class="comment">//在第i个表项后插入x</span></span><br><span class="line">    virtual <span class="type">bool</span> <span class="title function_">Remove</span><span class="params">(<span class="type">int</span> i, T&amp; x)</span> = <span class="number">0</span>;           <span class="comment">//删除第i个表项</span></span><br><span class="line">    virtual <span class="type">bool</span> <span class="title function_">IsEmpty</span><span class="params">()</span> <span class="type">const</span> = <span class="number">0</span>;               <span class="comment">//判表空 </span></span><br><span class="line">    virtual <span class="type">bool</span> <span class="title function_">IsFull</span><span class="params">()</span> <span class="type">const</span> = <span class="number">0</span>;                <span class="comment">//判表满</span></span><br><span class="line">    virtual <span class="type">void</span> <span class="title function_">Sort</span><span class="params">()</span> = <span class="number">0</span>;                        <span class="comment">//排序</span></span><br><span class="line">    virtual <span class="type">void</span> <span class="title function_">input</span><span class="params">()</span> = <span class="number">0</span>;                       <span class="comment">//输入</span></span><br><span class="line">    virtual <span class="type">void</span> <span class="title function_">output</span><span class="params">()</span> = <span class="number">0</span>;                      <span class="comment">//输出</span></span><br><span class="line">    virtual LinearList&lt;T&gt;&amp; operator= </span><br><span class="line">                (LinearList&lt;T&gt;&amp; L) = <span class="number">0</span>;             <span class="comment">//赋值</span></span><br><span class="line">&#125;;  <span class="comment">//在基类中预留函数名，具体功能由派生类根据需要去定义</span></span><br></pre></td></tr></table></figure><h2 id="顺序表-Sequential-List">顺序表 (Sequential List)</h2><h3 id="优点">优点</h3><ul class="lvl-0"><li class="lvl-2"><p>存储利用率高，除数据外不需要其他空间</p></li><li class="lvl-2"><p>随机存取速度快</p></li></ul><h3 id="缺点">缺点</h3><ul class="lvl-0"><li class="lvl-2"><p>插入和删除时效率较低：平均需要移动一般元素</p></li><li class="lvl-2"><p>表长动态变化较大时难以确定合适的存储空间</p></li></ul><h3 id="顺序表类的定义">顺序表类的定义</h3><h2 id="单链表">单链表</h2><h2 id="双链表">双链表</h2><h2 id="STL容器-List">STL容器 List</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;线性表&lt;/h1&gt;
&lt;p&gt;感觉以前看过，下了课慢慢补吧。&lt;/p&gt;
&lt;h2 id=&quot;Vector&quot;&gt;Vector&lt;/h2&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="DSA" scheme="https://yours22.github.io/project/categories/DSA/"/>
    
    <category term="Basic" scheme="https://yours22.github.io/project/categories/DSA/Basic/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构与算法-位运算</title>
    <link href="https://yours22.github.io/project/2024/02/28/DSA-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>https://yours22.github.io/project/2024/02/28/DSA-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E4%BD%8D%E8%BF%90%E7%AE%97/</id>
    <published>2024-02-28T02:19:54.000Z</published>
    <updated>2024-03-19T02:25:49.793Z</updated>
    
    <content type="html"><![CDATA[<h1>位运算</h1><p>参考了<a href="https://www.runoob.com/w3cnote/bit-operation.html">菜鸟教程</a><br>进一步用法可参考<a href="https://leetcode.cn/circle/discuss/mDhWhf/">leetcode</a><br>上别的课摸鱼写的。也没什么内容。hexo的next主题markdown渲染有些问题，暂时不想管了。</p><h2 id="基本语法">基本语法</h2><table><thead><tr><th>符号</th><th>操作</th><th>描述</th></tr></thead><tbody><tr><td>&amp;</td><td>与</td><td>如果两个位都是1，则结果为1，否则为0</td></tr><tr><td>`<code></td><td></code>`</td><td>或</td></tr><tr><td>^</td><td>异或</td><td>如果两个位不同，则结果为1，否则为0</td></tr><tr><td>~</td><td>非</td><td>0变1，1变0</td></tr><tr><td>&lt;&lt;</td><td>左移</td><td>将位向左移动指定的位数</td></tr><tr><td>&gt;&gt;</td><td>右移</td><td>将位向右移动指定的位数</td></tr></tbody></table><h2 id="常见用法">常见用法</h2><h3 id="按位与">按位与 &amp;</h3><ol><li class="lvl-3"><p>清零</p></li><li class="lvl-3"><p>取二进制数的指定位</p></li><li class="lvl-3"><p>判断奇偶</p></li></ol><h3 id="按位或">按位或 |</h3><ol><li class="lvl-3"><p>把某些位设置为1</p></li></ol><h3 id="异或-（不进位加法）">异或 ^ （不进位加法）</h3><ol><li class="lvl-3"><p>翻转指定位</p></li><li class="lvl-3"><p>交换两个数</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Swap</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a != b)&#123;</span><br><span class="line">        a ^= b;</span><br><span class="line">        b ^= a;</span><br><span class="line">        a ^= b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">a ^= b;：这一步将a和b进行异或操作，并将结果存储在a中。此时，a的值实际上是原始的a和b的异或结果。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">b ^= a;：这一步将新的a（即a和b的异或结果）和b进行异或操作，并将结果存储在b中。由于异或操作的性质（一个数与同一个数异或两次结果还是原数），这一步实际上将b的值变为了原始的a的值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">a ^= b;：这一步将新的b（即原始的a的值）和新的a（即a和b的异或结果）进行异或操作，并将结果存储在a中。同样由于异或操作的性质，这一步将a的值变为了原始的b的值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">~~~  </span><br><span class="line"><span class="number">3.</span> 只出现一次的数字（<span class="number">24.3</span><span class="number">.19</span>，leetcode <span class="number">136</span>）  </span><br><span class="line"></span><br><span class="line">给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</span><br><span class="line"></span><br><span class="line">你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 取反 ~</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 使一个数的最低位为<span class="number">0</span></span><br><span class="line"></span><br><span class="line">~~~C</span><br><span class="line">a &amp; ~ <span class="number">1</span></span><br><span class="line"> ~ <span class="number">1</span>=<span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1110</span> </span><br></pre></td></tr></table></figure><p>如上</p><h3 id="左移-与-右移-s">左移 &lt;&lt; 与 右移 &gt;&gt;s</h3><p>每左（右）移一位，相当于乘（除）2</p><h2 id="常见运算技巧">常见运算技巧</h2><p>进一步用法可参考<a href="https://leetcode.cn/circle/discuss/mDhWhf/">leetcode</a></p><h3 id="取相反数">取相反数</h3><p>-a = ~ a + 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  1024 = 0b00000000000000000000010000000000</span><br><span class="line"> -1024 = 0b11111111111111111111110000000000</span><br><span class="line"> ~1024 = 0b11111111111111111111101111111111</span><br><span class="line">~-1024 = 0b00000000000000000000001111111111</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;位运算&lt;/h1&gt;
&lt;p&gt;参考了&lt;a href=&quot;https://www.runoob.com/w3cnote/bit-operation.html&quot;&gt;菜鸟教程&lt;/a&gt;&lt;br&gt;
进一步用法可参考&lt;a href=&quot;https://leetcode.cn/circle/disc</summary>
      
    
    
    
    <category term="DSA" scheme="https://yours22.github.io/project/categories/DSA/"/>
    
    <category term="补充" scheme="https://yours22.github.io/project/categories/DSA/%E8%A1%A5%E5%85%85/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统-lecture-1.md</title>
    <link href="https://yours22.github.io/project/2024/02/26/OS-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-lecture-1/"/>
    <id>https://yours22.github.io/project/2024/02/26/OS-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-lecture-1/</id>
    <published>2024-02-26T11:10:07.000Z</published>
    <updated>2024-03-04T13:40:46.375Z</updated>
    
    <content type="html"><![CDATA[<h1>第一讲 操作系统概论</h1><h4>第一部分，该讲没什么价值，未必会补全</h4>由于不想花太多时间卷绩点/背书等，所以选了贵系这一门谌卫军老师开的，3学分，面向全校开的课，方便和老师助教交流，同时有时间的话参考thu的ucore 和 rcore 尝试自己写一个操作系统。  <br/><br/> 考核方式：40% 课后习题 + 30% coding + 25% 小测  <br/><br/> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个引入题</span></span><br><span class="line">BOOL  g_bEndFlag = TRUE;</span><br><span class="line">semId   g_synSemId;<span class="comment">//信号量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 优先级低，70 */</span></span><br><span class="line"><span class="type">void</span>  <span class="title function_">testTaskA</span><span class="params">( )</span>     </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(g_bEndFlag)</span><br><span class="line">    &#123;        <span class="comment">/* 等待信号量 */</span></span><br><span class="line">        semTake(g_synSemId);</span><br><span class="line">        g_bEndFlag = FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*优先级高，50*/</span></span><br><span class="line"><span class="type">void</span>  <span class="title function_">testTaskB</span><span class="params">( )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>  nRecvLen;</span><br><span class="line">    <span class="keyword">while</span>(g_bEndFlag) &#123;</span><br><span class="line">        nRecvLen = recv(sockId....);</span><br><span class="line">        <span class="keyword">if</span>(nRecvLen &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/* 打印结束信息 */</span>           </span><br><span class="line">            <span class="built_in">printf</span>(Finished!”);            </span><br><span class="line">            <span class="comment">/* 释放信号量 */</span>           </span><br><span class="line">            semGive(g_synSemId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>某次运行程序后，不断打印 “Finished” ，为什么？<br><br /><br>I/O设备出现故障，异常情况下不阻塞了，这样<code>recv(sockId)始终小于等于0</code>，testTaskB不断循环，cpu无法跑testTaskA</p><p>解决办法：testTaskB()后，OSDelay(100)，cpu能够有空闲运行testTaskA</p><h4 id="进程优先级是什么？"><a href="https://zhuanlan.zhihu.com/p/460053767">进程优先级是什么？</a></h4><h2 id="1-1-计算机概述">1.1 计算机概述</h2><h4 id="计算机包含什么-硬件设备-？">计算机包含什么 <em><strong>硬件设备</strong></em> ？</h4><br /><p>BUS   CPU<br>|    Memory<br>|    Video Controller<br>|    Keyboard Controller<br>|    USB Controller<br>V    Hard Disk Controller</p><img src="./img/os1.png" width="500" height="350" /><h4 id="计算机指令">计算机指令</h4><table><thead><tr><th>add</th><th>$r_1$</th><th>$r_2$</th><th>$r_3$</th></tr></thead><tbody><tr><td>1010111</td><td>001</td><td>010</td><td>011</td></tr></tbody></table><p>操作码 操作数</p><h2 id="1-2-操作系统的概念">1.2 操作系统的概念</h2><p>如果直接对硬件编程？键盘如何工作？如何把键盘缓冲中的数据拷贝到内存，显示器如何工作…?<br>管理</p><p>管理系统的各个部件，使之能正常运转<br>提供软件接口等。</p><h2 id="1-3-历史-略">1.3 历史 略</h2><h2 id="1-4-操作系统的类型">1.4 操作系统的类型</h2><p>也略过吧。</p><h3 id="实时操作系统">实时操作系统</h3><h3 id="嵌入式操作系统">嵌入式操作系统</h3><h3 id="分布式操作系统">分布式操作系统</h3><h3 id="其他">其他</h3><p>批处理操作系统、分时操作系统、个人计算机操作系统等</p><h2 id="1-5-操作系统需要的硬件特性-（比较重要）">1.5 操作系统需要的硬件特性 （比较重要）</h2><ul class="lvl-0"><li class="lvl-2"><p>受保护的指令</p></li><li class="lvl-2"><p>系统调用</p></li><li class="lvl-2"><p>内存保护</p></li><li class="lvl-2"><p>中断机制</p></li><li class="lvl-2"><p>I/O设备</p></li><li class="lvl-2"><p>时钟操作</p></li></ul><h3 id="受保护的指令-（-特权指令-）">受保护的指令 （ 特权指令 ）</h3><p>有些指令只有操作系统才有权访问,例如：</p><ul class="lvl-0"><li class="lvl-2"><p>对某些硬件资源的直接访问指令，如对 I/O设备的直接访问指令，如磁盘、打印机等；</p></li><li class="lvl-2"><p>对内存管理状态进行操作的指令，如内存地址映射、刷新TLB等</p></li><li class="lvl-2"><p>某些特殊的状态位的设置指令</p></li><li class="lvl-2"><p>停机指令。</p></li></ul><p><a href="https://cloud.tencent.com/developer/article/1432783">什么是TLB?</a></p><h4 id="如何从硬件上实现这个要求？">如何从硬件上实现这个要求？</h4><p><strong>处理器的状态</strong></p><p>根据运行程序对资源和机器指令的使用权限，把处理器设置为不同状态。</p><p>多数系统将处理器工作状态划分为管态和目态。</p><p><strong>管态</strong> ：操作系统的管理程序运行时的状态，较高的特权级别，又称为特权态、系统态、内核态</p><p>处理器处于管态时：可以执行所有的指令（包括特权指令）、使用所有的资源，并具有改变处理器状态的能力。</p><p><strong>目态</strong>： 用户程序运行时的状态，较低的特权级别，又称为普通态（普态）、用户态。</p><p>在此状态下禁止使用特权指令，不能直接使用系统资源与改变CPU状态，并且只能访问用户程序所在的存储空间。有些系统将处理器状态划分核心状态，管理状态和用户程序状态（目标状态）三种。</p><p>在磁盘、内存、寄存器、网络、CD-ROM中，CPU能直接访问的只有：</p><p>内存和寄存器。</p><h4 id="以-x86系列处理器为例">以 x86系列处理器为例</h4><p>x86处理器支持4个处理器特权级别：$R_0,R_1,R_2,R_3$ , 特权能力一次下降。$R_0$相当于双状态系统的内核态，$R_3$相当于用户态。</p><p>各个级别有保护性检查（地址校验、I/O限制）</p><p>特权级别之间的转换方式不尽相同</p><p>四个级别运行不同类别的程序：</p><ul class="lvl-0"><li class="lvl-2"><p>R0-运行操作系统核心代码</p></li><li class="lvl-2"><p>R1-运行关键设备驱动程序和I/O处理例程</p></li><li class="lvl-2"><p>R2-运行其它受保护共享代码，如语言系统运行环境</p></li><li class="lvl-2"><p>R3-运行各种用户程序</p></li></ul><p>现有基于x86处理器的操作系统，多数UNIX、Linux以及Windows系列大都只用了R0和R3两个特权级别。</p><h4 id="CPU如何判断当前运行的程序是系统程序还是用户程序">CPU如何判断当前运行的程序是系统程序还是用户程序</h4><p><strong>程序状态字 PSW（Program Status Word）</strong></p><p>一个专门的寄存器，用来指示处理器的状态。<br>通常包括：</p><ul class="lvl-0"><li class="lvl-2"><p>CPU的工作状态码——指明内核态还是用户态，说明当前在CPU上执行的是操作系统还是一般用户，从而决定其是否可以使用特权指令或拥有其它的特殊权力。</p></li><li class="lvl-2"><p>条件码 —— 反应指令执行后的结果特征</p></li><li class="lvl-2"><p>中断屏蔽码 —— 指出是否允许中断</p></li></ul><h4 id="状态之间如何转换？">状态之间如何转换？</h4><img src="./img/os2.png" width="500" height="350" /><p>因此，为了解决用户去做一些带有特权的指令（比如I/O）时：</p><h3 id="系统调用">系统调用</h3><p><code>system call</code></p><p>用户程序通过特殊的访管指令，来请求操作系统为其提供某种功能的服务。系统调用指令的实现过程一般是：</p><ul class="lvl-0"><li class="lvl-2"><p>当CPU执行访管指令时，即引起访管中断；</p></li><li class="lvl-2"><p>处理器保存中断点的程序执行上下文环境（PSW,PC和其他的一些寄存器），CPU切换到内核态。</p></li><li class="lvl-2"><p>中断处理程序开始工作，调用相应的系统服务。</p></li><li class="lvl-2"><p>中断处理结束后，恢复被中断程序的上下文环境，CPU恢复为用户态，回到中断点继续执行</p></li></ul><img src="./img/os3.png" width="500" height="350" /><img src="./img/os4.png" width="500" height="350" /><p>C语言中也可以写如上图中的汇编代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源文件test_c_asm.c </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">asm</span>( </span><br><span class="line">    <span class="string">&quot;.text\n&quot;</span> </span><br><span class="line">    <span class="string">&quot;.global Add\n&quot;</span> </span><br><span class="line">    <span class="string">&quot;.type Add, %function\n&quot;</span> </span><br><span class="line">    <span class="string">&quot;Add:\n&quot;</span> </span><br><span class="line">    <span class="string">&quot;add w0, w0, w1\n&quot;</span> </span><br><span class="line">    <span class="string">&quot;ret&quot;</span> </span><br><span class="line">); </span><br><span class="line"> </span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>; </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>** argv)</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="type">int</span> b=<span class="number">1</span>,c=<span class="number">2</span>; </span><br><span class="line">    <span class="type">int</span> a = Add(b,c); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;res =  %d\n&quot;</span>, a); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>更详细一点的情况，可以参见 <a href="https://zhuanlan.zhihu.com/p/455686605">C语言&amp;汇编混合编程</a></p><p>但是，系统调用和函数调用比起来，虽然保护了系统，更安全，但是：</p><ul class="lvl-0"><li class="lvl-2"><p>跨越了硬件栅栏，开销更大（无系统函数的地址、Cache和TLB项更新等），一次系统调用所花费的时间是一次函数调用的10－1000倍</p></li><li class="lvl-2"><p>解决方案：把一些系统功能放在用户态下运行，如动态库（DLL）</p></li></ul><p><a href="https://learn.microsoft.com/zh-cn/troubleshoot/windows-client/setup-upgrade-and-drivers/dynamic-link-library">什么是dll</a></p><p>而对于 <em>函数调用</em> ：</p><img src="./img/os5.png" width="500" height="300" /><ul class="lvl-0"><li class="lvl-2"><p>栈中保存的信息<br>返回地址、调用函数的寄存器值</p></li></ul><h3 id="内存保护">内存保护</h3><ol><li class="lvl-3"><p>防止一个用户程序去访问其他用户程序的数据。</p></li><li class="lvl-3"><p>保护操作系统免受用户程序的破坏。</p></li></ol><p>留待存储管理时展开。</p><h3 id="中断机制">中断机制</h3><p>留待I/O管理时展开。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;第一讲 操作系统概论&lt;/h1&gt;
&lt;h4&gt;第一部分，该讲没什么价值，未必会补全&lt;/h4&gt;
由于不想花太多时间卷绩点/背书等，所以选了贵系这一门谌卫军老师开的，3学分，面向全校开的课，方便和老师助教交流，同时有时间的话参考thu的ucore 和 rcore 尝试自己写一个操作</summary>
      
    
    
    
    <category term="操作系统" scheme="https://yours22.github.io/project/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="基础" scheme="https://yours22.github.io/project/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>HelloWorld</title>
    <link href="https://yours22.github.io/project/2024/02/26/%E9%9A%8F%E8%AE%B0-HelloWorld/"/>
    <id>https://yours22.github.io/project/2024/02/26/%E9%9A%8F%E8%AE%B0-HelloWorld/</id>
    <published>2024-02-26T02:07:39.000Z</published>
    <updated>2024-03-04T03:34:41.910Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我为什么建立这个博客">我为什么建立这个博客</h2><h4 id="Why-I-decide-to-establish-this-blog">Why I decide to establish this blog</h4><p> 从小就一直喜欢研究各种没碰过的东西，可惜由于个人的懒惰和客观条件的不允许，没能做成任何所谓 <code>有意义</code> 的东西。同时在大学的专业不是很让人感兴趣，也不想去用我这个笨脑子浪费时间去做科研，在大学的大多数时间也找不到有共同话题的朋友，我总喜欢记录这个事情本身，还有一些杂七杂八的事情，等到以后有机会再详述。</p><p> 总的来说，我希望这个博客主要能够记录下来我学习过的东西，方便以后查找和补全我的技术栈，同时也显得大学生活不是那么空虚，其次用一个小入口记录下我不想发朋友圈的奇怪的想法。<br> 最后声明，所 <code>学习</code> 的内容大多数是基于 <em><strong>好奇和爱好</strong></em> ，未必有深度和价值。会慢慢往里面填基础知识，或者记录一下自己尝试实践的过程，但是我自己写了不一定及时更新到Github Page上。<br>当然，也欢迎和我交流你的想法。</p><h5>主题也不一定会花时间优化，暂时以记录为主。</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;我为什么建立这个博客&quot;&gt;我为什么建立这个博客&lt;/h2&gt;
&lt;h4 id=&quot;Why-I-decide-to-establish-this-blog&quot;&gt;Why I decide to establish this blog&lt;/h4&gt;
&lt;p&gt; 从小就一直喜欢研究各种没碰过</summary>
      
    
    
    
    <category term="随记" scheme="https://yours22.github.io/project/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="随记" scheme="https://yours22.github.io/project/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
</feed>
